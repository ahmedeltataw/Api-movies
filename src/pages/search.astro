---
import Layout from "../layouts/Layout.astro";
import { fetchApi } from "@scripts/api";
import { Icon } from "astro-icon/components";
import { votePercentage, getColor, splitDate } from "@scripts/configuration";
import type { CardType } from "../types/type";
//
import Card from "@components/Cards/Card.astro";
import PeopleCard from "@components/Cards/PeopleCard.astro";
import CardSlekton from "@components/ui/CardSlekton.astro";
import FilterHeading from "@components/ui/FilterHeading.astro";
//
let currentPage = 1;
let totalPages = 1;
//
const query: string | null = Astro.url.searchParams.get("q");
const mediaType: string | null = Astro.url.searchParams.get("type");
let data = null;
try {
  let apiUrl = `search/multi?query=${query}&page=${currentPage}`;
  if (mediaType)
    apiUrl = `search/${mediaType}?query=${query}&page=${currentPage}`;
  console.log(mediaType);

  data = await fetchApi(apiUrl);
  totalPages = data.total_results;
  console.log(totalPages);
} catch (error) {
  console.error("Error fetching data:", error);
}
---

<!--  -->
<Layout title=` ${query}` des="">
  <!-- <BaseSection/> -->
  <section class="searchPage" aria-label="search page">
    <div class="container">
      <!-- search filter -->
      <FilterHeading
        title={{
          name: `${query}`,
          subName: "serach result for:",
          spanClass: "fs-28 fw-700 ",
          Class: "fs-20 fw-500 o-80",
        }};
        label={{name:'sort by' , Class:'sm-max:d-none pe-2 fs-18 fw-500 o-80'}}
        name="media_type"
        id="mediaType"
        Class="d-flex align-items-center justify-between sm:py-5 sm-max:flex-wrap py-8 w-full sm-max:gap-5"
        selectClass="sm:w-80 h-18 round-full ps-4 filterSelect   w-full"
      >
        <option value={`?q=${query}`} selected={!mediaType}>All</option>
        <option
          value={`?q=${query}&type=movie`}
          selected={mediaType === "movie"}>Movies</option
        >
        <option value={`?q=${query}&type=tv`} selected={mediaType === "tv"}
          >TV Shows</option
        >
        <option
          value={`?q=${query}&type=person`}
          selected={mediaType === "person"}>People</option
        >
      </FilterHeading>
      <!--  -->
      <div
        class="d-grid align-items-center xl:grid-col-5 lg:grid-col-4 md:grid-col-3 sm-max:grid-col-2 sm:grid-col-2 grid-col-1 gap-5"
        id="searchContainer"
      >
        {
          data.results.map((item: CardType) =>
            mediaType === "person" || item.media_type === "person" ? (
              <PeopleCard
                server:defer
                id={item.id}
                src={item.profile_path}
                type={
                  item.known_for_department !== null
                    ? `(${item.known_for_department})`
                    : undefined
                }
                title={item.original_name}
                height={item.profile_path === null ? true : false}>
                <div slot="fallback">
                  <CardSlekton cardName="peopleCard" />
                </div>
              </PeopleCard>
            ) : (
              <Card
                server:defer
                title={item.original_title || item.original_name}
                src={item.poster_path}
                alt={item.original_title || item.original_name}
                year={
                  item.release_date
                    ? `(${splitDate(item.release_date)})`
                    : item.first_air_date
                      ? `(${splitDate(item.first_air_date)})`
                      : ""
                }
                id={item.id}
                inSlidr={false}
                rate={votePercentage(item.vote_average)}
                color={getColor(item.vote_average)}
                href={`/movies/${item.id}`}>
                <div slot="fallback">
                  <CardSlekton />
                </div>
              </Card>
            )
          )
        }
        <!-- Infinite Scroll Loading Indicator -->
      </div>
      <div class="loader mx-auto mt-3 d-none">
        <Icon name={`loader`} class={`w-60 mx-auto`} />
      </div>
    </div>
  </section>
</Layout>

<!-- infinty scolling -->
<script>
  import { fetchApi } from "@scripts/api";
  import { updateUi, CardEffect, LastCardFollow } from "@scripts/global";

  let searchContainer = document.getElementById(
    "searchContainer"
  ) as HTMLDivElement;
  let loader = document.querySelector(".loader") as HTMLDivElement;
  let Body = document.body;
  let page = 2;
  let totalPages = Infinity;

  let loading = false;

  let query: string | null = new URLSearchParams(window.location.search).get(
    "q"
  );
  let type: string | null = new URLSearchParams(window.location.search).get(
    "type"
  );

  const loadMore = async () => {
    if (loading || page > totalPages) return;
    loading = true;

    if (loading) loader.classList.remove("d-none");
    try {
      console.log("Loading page:", page);
      let apiUrl = `search/multi?query=${query}&page=${page}`;
      if (type) apiUrl = `search/${type}?query=${query}&page=${page}`;
      // console.log(apiUrl)
      let newData = await fetchApi(apiUrl);
      if (newData && newData.results) {
        // console.log(newData.results)
        totalPages = Math.ceil(newData.total_results / 20);
        updateUi(newData.results, "after", searchContainer, false);
        CardEffect();

        page++;
      } else {
        console.error("No results found");
      }
    } catch (e) {
      console.error(`fix api ${e}`);
    } finally {
      loading = false; // Reset loading flag after fetching
      if (loading === false) loader.classList.add("d-none");
    }
  };
  LastCardFollow(loadMore);
  let debounceTimer: NodeJS.Timeout;
  window.addEventListener("scroll", () => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => {
      if (window.innerHeight + window.scrollY >= Body.offsetHeight - 10) {
        loadMore();
      }
    }, 200);
  });
</script>
